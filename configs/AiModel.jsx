const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };

    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode = model.startChat({
      generationConfig:CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate a todo app:\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \n\nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"React Todo App\",\n  \"explanation\": \"This project is a React-based Todo application utilizing Tailwind CSS for styling and lucide-react for icons. It features components for listing tasks, adding new tasks, and marking tasks as complete. The application is structured with separate components for better organization and code maintainability. It employs React's state management to handle the to-do list dynamically and provides a user-friendly interface with emoji icons to enhance the user experience.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport { TaskList } from './components/TaskList';\\nimport { AddTask } from './components/AddTask';\\nimport { Header } from './components/Header';\\nimport { Footer } from './components/Footer';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 font-sans\\\">\\n    <Header />\\n      <div className=\\\"container mx-auto p-4\\\">\\n        <AddTask />\\n        <TaskList />\\n      </div>\\n      <Footer />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Check, Trash, Edit } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst getInitialTasks = () => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  };\\n\\nexport const TaskList = () => {\\n    const [tasks, setTasks] = useState(getInitialTasks());\\n    const [editTaskId, setEditTaskId] = useState(null);\\n    const [editTaskText, setEditTaskText] = useState('');\\n\\n    useEffect(() => {\\n      localStorage.setItem('tasks', JSON.stringify(tasks));\\n    }, [tasks]);\\n    \\n    const handleComplete = (id) => {\\n        setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n    };\\n\\n    const handleRemove = (id) => {\\n        setTasks(tasks.filter(task => task.id !== id));\\n    };\\n\\n    const handleEdit = (id, text) => {\\n      setEditTaskId(id);\\n      setEditTaskText(text);\\n    };\\n\\n    const handleSaveEdit = (id) => {\\n      setTasks(tasks.map(task => task.id === id ? { ...task, text: editTaskText } : task));\\n      setEditTaskId(null);\\n      setEditTaskText('');\\n    };\\n\\n    const handleCancelEdit = () => {\\n      setEditTaskId(null);\\n      setEditTaskText('');\\n    };\\n\\n  return (\\n    <div className=\\\"mt-4\\\">\\n        {tasks.length === 0 ? (\\n            <p className=\\\"text-center text-gray-500\\\">No tasks yet! 🎉</p>\\n          ) : (\\n        <ul className=\\\"space-y-2\\\">\\n          {tasks.map(task => (\\n            <li key={task.id} className=\\\"bg-white p-3 rounded shadow flex items-center justify-between\\\">\\n            <div className=\\\"flex items-center\\\">\\n            <button\\n                  onClick={() => handleComplete(task.id)}\\n                  className={`p-2 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 ${task.completed ? 'bg-green-200' : 'bg-gray-200 hover:bg-gray-300'}`}\\n                >\\n                 <Check className={`h-4 w-4 text-green-500 ${task.completed ? '' : 'hidden'}`} />\\n               </button>\\n               {editTaskId === task.id ? (\\n                 <input\\n                 type=\\\"text\\\"\\n                 value={editTaskText}\\n                 onChange={(e) => setEditTaskText(e.target.value)}\\n                 className=\\\"ml-2 p-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-300\\\"\\n               />\\n               ) : (\\n               <span className={`ml-2 ${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>\\n                 {task.text}\\n              </span>\\n               )}\\n            </div>\\n              <div className=\\\"flex items-center space-x-2\\\">\\n                 {editTaskId === task.id ? (\\n                   <>\\n                    <button onClick={() => handleSaveEdit(task.id)} className=\\\"px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400\\\">Save</button>\\n                   <button onClick={handleCancelEdit} className=\\\"px-2 py-1 bg-gray-400 text-white rounded hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-300\\\">Cancel</button>\\n                   </>\\n                  ) : (\\n                    <>\\n                      <button onClick={() => handleEdit(task.id, task.text)} className=\\\"p-2 text-gray-600 hover:text-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-300\\\">\\n                      <Edit className=\\\"h-4 w-4\\\" />\\n                     </button>\\n                  <button onClick={() => handleRemove(task.id)} className=\\\"p-2 text-gray-600 hover:text-red-500 focus:outline-none focus:ring-2 focus:ring-red-300\\\">\\n                    <Trash className=\\\"h-4 w-4\\\" />\\n                  </button>\\n                  </>\\n                  )}\\n              </div>\\n            </li>\\n          ))}\\n        </ul>\\n          )}\\n    </div>\\n  );\\n};\\n\"\n    },\n    \"/components/AddTask.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nexport const AddTask = () => {\\n  const [taskText, setTaskText] = useState('');\\n  const [tasks, setTasks] = useState(() => {\\n      const savedTasks = localStorage.getItem('tasks');\\n      return savedTasks ? JSON.parse(savedTasks) : [];\\n    });\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (!taskText.trim()) return;\\n    const newTask = {\\n      id: Date.now(),\\n      text: taskText,\\n      completed: false,\\n    };\\n    setTasks(prevTasks => [...prevTasks, newTask]);\\n    setTaskText('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex mt-4\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={taskText}\\n        onChange={(e) => setTaskText(e.target.value)}\\n        placeholder=\\\"Add a new task...\\\" \\n        className=\\\"flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-300\\\"/>\\n      <button type=\\\"submit\\\" className=\\\"ml-2 p-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\\\">\\n      <Plus className=\\\"h-5 w-5\\\"/>\\n       </button>\\n    </form>\\n  );\\n};\\n\"\n    },\n     \"/components/Header.js\": {\n      \"code\": \"import React from 'react';\\nimport { Clock } from 'lucide-react';\\n\\nexport const Header = () => {\\n  return (\\n    <header className=\\\"bg-blue-600 p-4 text-white shadow\\\">\\n      <div className=\\\"container mx-auto flex items-center justify-between\\\">\\n      <div className=\\\"flex items-center\\\">\\n        <Clock className=\\\"h-6 w-6 mr-2\\\" />\\n          <h1 className=\\\"text-2xl font-bold\\\">TaskMaster</h1>\\n        </div>\\n        <span className=\\\"text-sm\\\">Organize your day!</span>\\n      </div>\\n    </header>\\n  );\\n};\\n\"\n    },\n        \"/components/Footer.js\": {\n      \"code\": \"import React from 'react';\\n\\nexport const Footer = () => {\\n    const currentYear = new Date().getFullYear();\\n  return (\\n    <footer className=\\\"bg-gray-800 text-white text-center p-4 mt-8\\\">\\n      <p>&copy; {currentYear} TaskMaster. All Rights Reserved. 🧑‍💻</p>\\n    </footer>\\n  );\\n};\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList.js\",\n    \"/components/AddTask.js\",\n    \"/components/Header.js\",\n    \"/components/Footer.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
      
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
